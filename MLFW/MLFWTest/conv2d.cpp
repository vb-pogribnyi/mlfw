#include "pch.h"
#include "common.h"
#include <operation/Conv.h>

TEST(Conv2d, Instantiation) {
	Conv2d conv(1, 1, 1, 1);
	EXPECT_EQ(true, true);
}

struct Conv2dRunTestCase {
	vector<float> input;
	vector<int> in_shape;
	vector<float> kernel_w;
	vector<float> kernel_b;
	vector<int> kernel_shape;
	vector<float> output;
	vector<int> out_shape;
};

class Conv2dRunTest : public ::testing::TestWithParam<Conv2dRunTestCase> {};

TEST_P(Conv2dRunTest, Conv2dRunTest) {
	auto p = GetParam();
	vector<int> ks = p.kernel_shape;
	Conv2d conv(ks[0], ks[1], ks[2], ks[3]);
	conv.weight->setData(&p.kernel_w[0]);
	conv.bias->setData(&p.kernel_b[0]);

	Tensor input(p.in_shape, &p.input[0]);
	Tensor output(p.out_shape);
	conv.run(&output, &input);
	Tensor::sync();
	vector<float> output_data = output.getData();
	Tensor::sync();
	compare_arrays(&p.output[0], &output_data[0], p.output.size());
	Tensor::reset();
}

INSTANTIATE_TEST_CASE_P(Conv2d, Conv2dRunTest, ::testing::Values(
	Conv2dRunTestCase({ { 1 }, { 1, 1, 1, 1 }, { 1 }, { 1 }, {1, 1, 1, 1}, { 2 }, { 1, 1, 1, 1 } }),
	Conv2dRunTestCase({ { 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 3, 3 },
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 1 }, {1, 1, 3, 3},
		{ 10 }, { 1, 1, 1, 1 } }),
	Conv2dRunTestCase({ {
			1, 1, 1, 1,
			1, 1, 1, 1,
			1, 1, 1, 1,
			1, 1, 1, 1 }, { 1, 1, 4, 4 },
		{ 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 1 }, {1, 1, 3, 3},
		{ 10, 10, 10, 10 }, { 1, 1, 2, 2 } }),
		Conv2dRunTestCase({ {
			1.6, 0.3, 0.5, 0.8,
			0.2, 0.2, 0.1, 0.5,
			0.1, 0.2, 1.3, 0.5,
			1.1, 0.5, 0.3, 0.2 }, { 1, 1, 4, 4 },
		{ 0.1, 0.3, 0.2, 0.6, 1.1, 0.8, 0.5, 0.4, 0.1 }, { 1 }, {1, 1, 3, 3},
		{ 2.03, 2.64, 3.2, 3.49 }, { 1, 1, 2, 2 } }),
		Conv2dRunTestCase({ {
			1.6, 0.3, 0.5, 0.8,
			0.2, 0.2, 0.1, 0.5,
			0.1, 0.2, 1.3, 0.5,
			1.1, 0.5, 0.3, 0.2 }, { 1, 1, 4, 4 },
		{
			0.1, 0.3, 0.2, 0.6, 1.1, 0.8, 0.5, 0.4, 0.1,
			0.8, 0.6, 0.2, 0.6, 1.2, 0.1, 0.9, 0.6, 0.4 }, { 0.2, 0.5 }, {1, 2, 3, 3},
		{ 1.23, 1.84, 2.4, 2.69, 3.16, 2.65, 2.64, 3.26 }, { 1, 2, 2, 2 } }),
		Conv2dRunTestCase({ {
			1.6, 0.3, 0.5, 0.8,
			0.2, 0.2, 0.1, 0.5,
			0.1, 0.2, 1.3, 0.5,
			1.1, 0.5, 0.3, 0.2,

			1.8, 0.2, 0.4, 0.1,
			0.9, 0.2, 0.4, 0.5,
			0.1, 0.5, 0.3, 0.3,
			1.2, 0.8, 0.9, 0.1 }, { 1, 2, 4, 4 },
		{
			0.1, 0.3, 0.2, 0.6, 1.1, 0.8, 0.5, 0.4, 0.1,
			0.8, 0.6, 0.2, 0.6, 1.2, 0.1, 0.9, 0.6, 0.4 }, { 0.2 }, {2, 1, 3, 3},
		{ 4.2, 3.66, 5.93, 5.18 }, { 1, 1, 2, 2 } }),
		Conv2dRunTestCase({ {
			1.6, 0.3, 0.5, 0.8,
			0.2, 0.2, 0.1, 0.5,
			0.1, 0.2, 1.3, 0.5,
			1.1, 0.5, 0.3, 0.2,

			1.8, 0.2, 0.4, 0.1,
			0.9, 0.2, 0.4, 0.5,
			0.1, 0.5, 0.3, 0.3,
			1.2, 0.8, 0.9, 0.1 }, { 1, 2, 4, 4 },
		{
			0.1, 0.3, 0.2, 0.6, 1.1, 0.8, 0.5, 0.4, 0.1,
			0.8, 0.6, 0.2, 0.6, 1.2, 0.1, 0.9, 0.6, 0.4,
			0.6, 0.3, 0.2, 0.6, 1.0, 0.8, 0.2, 0.4, 0.1,
			0.4, 0.9, 0.2, 0.6, 1.8, 0.4, 0.9, 0.6, 0.5 }, { 0.2, 0.5 }, {2, 2, 3, 3},
		{ 4.2, 3.66, 5.93, 5.18, 4.86, 4.5, 6.16, 5.62 }, { 1, 2, 2, 2 } }),
		Conv2dRunTestCase({ {
			1.6, 0.3, 0.5, 0.8,
			0.2, 0.2, 0.1, 0.5,
			0.1, 0.2, 1.3, 0.5,
			1.1, 0.5, 0.3, 0.2,

			1.8, 0.2, 0.4, 0.1,
			0.9, 0.2, 0.4, 0.5,
			0.1, 0.5, 0.3, 0.3,
			1.2, 0.8, 0.9, 0.1 }, { 1, 2, 4, 4 },
		{
			0.1, 0.3, 0.2, 0.6, 1.1, 0.8, 0.5, 0.4, 0.1,
			0.8, 0.6, 0.2, 0.6, 1.2, 0.1, 0.9, 0.6, 0.4,
			0.6, 0.3, 0.2, 0.6, 1.0, 0.8, 0.2, 0.4, 0.1,
			0.4, 0.9, 0.2, 0.6, 1.8, 0.4, 0.9, 0.6, 0.5,
			0.1, 0.3, 0.5, 0.6, 1.7, 0.8, 0.1, 0.4, 0.3,
			0.6, 0.2, 0.5, 0.7, 0.3, 0.4, 0.3, 0.6, 0.5 }, { 0.2, 0.5, 0.3 }, {2, 3, 3, 3},
		{ 4.2, 3.66, 5.93, 5.18, 4.86, 4.5, 6.16, 5.62, 4.47, 3.45, 4.68, 5.4 }, { 1, 3, 2, 2 } }),
		Conv2dRunTestCase({ {
			1.6, 0.3, 0.5, 0.8,
			0.2, 0.2, 0.1, 0.5,
			0.1, 0.2, 1.3, 0.5,
			1.1, 0.5, 0.3, 0.2,

			1.8, 0.2, 0.4, 0.1,
			0.9, 0.2, 0.4, 0.5,
			0.1, 0.5, 0.3, 0.3,
			1.2, 0.8, 0.9, 0.1,

			0.2, 1.3, 0.5, 0.8,
			0.2, 0.2, 0.8, 0.5,
			0.1, 0.4, 1.2, 0.8,
			1.1, 0.5, 0.3, 0.1,

			1.8, 0.2, 0.4, 0.1,
			0.9, 0.3, 0.6, 0.5,
			0.3, 0.1, 0.9, 0.3,
			1.2, 0.1, 0.2, 0.7 }, { 2, 2, 4, 4 },
		{
			0.1, 0.3, 0.2, 0.6, 1.1, 0.8, 0.5, 0.4, 0.1,
			0.8, 0.6, 0.2, 0.6, 1.2, 0.1, 0.9, 0.6, 0.4,
			0.6, 0.3, 0.2, 0.6, 1.0, 0.8, 0.2, 0.4, 0.1,
			0.4, 0.9, 0.2, 0.6, 1.8, 0.4, 0.9, 0.6, 0.5,
			0.1, 0.3, 0.5, 0.6, 1.7, 0.8, 0.1, 0.4, 0.3,
			0.6, 0.2, 0.5, 0.7, 0.3, 0.4, 0.3, 0.6, 0.5 }, { 0.2, 0.5, 0.3 }, {2, 3, 3, 3},
		{ 4.2, 3.66, 5.93, 5.18, 4.86, 4.5, 6.16, 5.62, 4.47, 3.45, 4.68, 5.4,
			5.31, 4.92, 5.31, 5.5, 5.45, 6.25, 5.42, 6.39, 5.47, 5.18, 4.9, 5.44}, { 2, 3, 2, 2 } })
));